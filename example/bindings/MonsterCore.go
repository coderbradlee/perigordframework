// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MonsterCoreABI is the input ABI used to generate the binding from.
const MonsterCoreABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_preferredTransport\",\"type\":\"string\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_STARTING_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSiringAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint256\"}],\"name\":\"isPregnant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_AUCTION_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"siringAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneScienceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sireAllowedToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"canBreedWith\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSiringAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setAutoBirthFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"approveSiring\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMonster\",\"outputs\":[{\"name\":\"isGestating\",\"type\":\"bool\"},{\"name\":\"isReady\",\"type\":\"bool\"},{\"name\":\"cooldownIndex\",\"type\":\"uint256\"},{\"name\":\"nextActionAt\",\"type\":\"uint256\"},{\"name\":\"siringWithId\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"matronId\",\"type\":\"uint256\"},{\"name\":\"sireId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"genes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monsterIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"giveBirth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPromoMonster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monsterIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoBirthFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721Metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pregnantMonsters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint256\"}],\"name\":\"isReadyToBreed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setMetadataAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sireId\",\"type\":\"uint256\"},{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"bidOnSiringAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"breedWithAuto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cooldownEndBlock\",\"type\":\"uint256\"}],\"name\":\"Pregnant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"MonsterId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]"

// MonsterCoreBin is the compiled bytecode used for deploying new contracts.
const MonsterCoreBin = ``

// DeployMonsterCore deploys a new Ethereum contract, binding an instance of MonsterCore to it.
func DeployMonsterCore(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MonsterCore, error) {
	parsed, err := abi.JSON(strings.NewReader(MonsterCoreABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MonsterCoreBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MonsterCore{MonsterCoreCaller: MonsterCoreCaller{contract: contract}, MonsterCoreTransactor: MonsterCoreTransactor{contract: contract}, MonsterCoreFilterer: MonsterCoreFilterer{contract: contract}}, nil
}

// MonsterCore is an auto generated Go binding around an Ethereum contract.
type MonsterCore struct {
	MonsterCoreCaller     // Read-only binding to the contract
	MonsterCoreTransactor // Write-only binding to the contract
	MonsterCoreFilterer   // Log filterer for contract events
}

// MonsterCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type MonsterCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MonsterCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MonsterCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MonsterCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MonsterCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MonsterCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MonsterCoreSession struct {
	Contract     *MonsterCore      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MonsterCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MonsterCoreCallerSession struct {
	Contract *MonsterCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// MonsterCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MonsterCoreTransactorSession struct {
	Contract     *MonsterCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MonsterCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type MonsterCoreRaw struct {
	Contract *MonsterCore // Generic contract binding to access the raw methods on
}

// MonsterCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MonsterCoreCallerRaw struct {
	Contract *MonsterCoreCaller // Generic read-only contract binding to access the raw methods on
}

// MonsterCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MonsterCoreTransactorRaw struct {
	Contract *MonsterCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMonsterCore creates a new instance of MonsterCore, bound to a specific deployed contract.
func NewMonsterCore(address common.Address, backend bind.ContractBackend) (*MonsterCore, error) {
	contract, err := bindMonsterCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MonsterCore{MonsterCoreCaller: MonsterCoreCaller{contract: contract}, MonsterCoreTransactor: MonsterCoreTransactor{contract: contract}, MonsterCoreFilterer: MonsterCoreFilterer{contract: contract}}, nil
}

// NewMonsterCoreCaller creates a new read-only instance of MonsterCore, bound to a specific deployed contract.
func NewMonsterCoreCaller(address common.Address, caller bind.ContractCaller) (*MonsterCoreCaller, error) {
	contract, err := bindMonsterCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MonsterCoreCaller{contract: contract}, nil
}

// NewMonsterCoreTransactor creates a new write-only instance of MonsterCore, bound to a specific deployed contract.
func NewMonsterCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*MonsterCoreTransactor, error) {
	contract, err := bindMonsterCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MonsterCoreTransactor{contract: contract}, nil
}

// NewMonsterCoreFilterer creates a new log filterer instance of MonsterCore, bound to a specific deployed contract.
func NewMonsterCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*MonsterCoreFilterer, error) {
	contract, err := bindMonsterCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MonsterCoreFilterer{contract: contract}, nil
}

// bindMonsterCore binds a generic wrapper to an already deployed contract.
func bindMonsterCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MonsterCoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MonsterCore *MonsterCoreRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MonsterCore.Contract.MonsterCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MonsterCore *MonsterCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MonsterCore.Contract.MonsterCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MonsterCore *MonsterCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MonsterCore.Contract.MonsterCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MonsterCore *MonsterCoreCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MonsterCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MonsterCore *MonsterCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MonsterCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MonsterCore *MonsterCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MonsterCore.Contract.contract.Transact(opts, method, params...)
}

// GEN0AUCTIONDURATION is a free data retrieval call binding the contract method 0x19c2f201.
//
// Solidity: function GEN0_AUCTION_DURATION() constant returns(uint256)
func (_MonsterCore *MonsterCoreCaller) GEN0AUCTIONDURATION(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "GEN0_AUCTION_DURATION")
	return *ret0, err
}

// GEN0AUCTIONDURATION is a free data retrieval call binding the contract method 0x19c2f201.
//
// Solidity: function GEN0_AUCTION_DURATION() constant returns(uint256)
func (_MonsterCore *MonsterCoreSession) GEN0AUCTIONDURATION() (*big.Int, error) {
	return _MonsterCore.Contract.GEN0AUCTIONDURATION(&_MonsterCore.CallOpts)
}

// GEN0AUCTIONDURATION is a free data retrieval call binding the contract method 0x19c2f201.
//
// Solidity: function GEN0_AUCTION_DURATION() constant returns(uint256)
func (_MonsterCore *MonsterCoreCallerSession) GEN0AUCTIONDURATION() (*big.Int, error) {
	return _MonsterCore.Contract.GEN0AUCTIONDURATION(&_MonsterCore.CallOpts)
}

// GEN0CREATIONLIMIT is a free data retrieval call binding the contract method 0x680eba27.
//
// Solidity: function GEN0_CREATION_LIMIT() constant returns(uint256)
func (_MonsterCore *MonsterCoreCaller) GEN0CREATIONLIMIT(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "GEN0_CREATION_LIMIT")
	return *ret0, err
}

// GEN0CREATIONLIMIT is a free data retrieval call binding the contract method 0x680eba27.
//
// Solidity: function GEN0_CREATION_LIMIT() constant returns(uint256)
func (_MonsterCore *MonsterCoreSession) GEN0CREATIONLIMIT() (*big.Int, error) {
	return _MonsterCore.Contract.GEN0CREATIONLIMIT(&_MonsterCore.CallOpts)
}

// GEN0CREATIONLIMIT is a free data retrieval call binding the contract method 0x680eba27.
//
// Solidity: function GEN0_CREATION_LIMIT() constant returns(uint256)
func (_MonsterCore *MonsterCoreCallerSession) GEN0CREATIONLIMIT() (*big.Int, error) {
	return _MonsterCore.Contract.GEN0CREATIONLIMIT(&_MonsterCore.CallOpts)
}

// GEN0STARTINGPRICE is a free data retrieval call binding the contract method 0x0e583df0.
//
// Solidity: function GEN0_STARTING_PRICE() constant returns(uint256)
func (_MonsterCore *MonsterCoreCaller) GEN0STARTINGPRICE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "GEN0_STARTING_PRICE")
	return *ret0, err
}

// GEN0STARTINGPRICE is a free data retrieval call binding the contract method 0x0e583df0.
//
// Solidity: function GEN0_STARTING_PRICE() constant returns(uint256)
func (_MonsterCore *MonsterCoreSession) GEN0STARTINGPRICE() (*big.Int, error) {
	return _MonsterCore.Contract.GEN0STARTINGPRICE(&_MonsterCore.CallOpts)
}

// GEN0STARTINGPRICE is a free data retrieval call binding the contract method 0x0e583df0.
//
// Solidity: function GEN0_STARTING_PRICE() constant returns(uint256)
func (_MonsterCore *MonsterCoreCallerSession) GEN0STARTINGPRICE() (*big.Int, error) {
	return _MonsterCore.Contract.GEN0STARTINGPRICE(&_MonsterCore.CallOpts)
}

// PROMOCREATIONLIMIT is a free data retrieval call binding the contract method 0xdefb9584.
//
// Solidity: function PROMO_CREATION_LIMIT() constant returns(uint256)
func (_MonsterCore *MonsterCoreCaller) PROMOCREATIONLIMIT(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "PROMO_CREATION_LIMIT")
	return *ret0, err
}

// PROMOCREATIONLIMIT is a free data retrieval call binding the contract method 0xdefb9584.
//
// Solidity: function PROMO_CREATION_LIMIT() constant returns(uint256)
func (_MonsterCore *MonsterCoreSession) PROMOCREATIONLIMIT() (*big.Int, error) {
	return _MonsterCore.Contract.PROMOCREATIONLIMIT(&_MonsterCore.CallOpts)
}

// PROMOCREATIONLIMIT is a free data retrieval call binding the contract method 0xdefb9584.
//
// Solidity: function PROMO_CREATION_LIMIT() constant returns(uint256)
func (_MonsterCore *MonsterCoreCallerSession) PROMOCREATIONLIMIT() (*big.Int, error) {
	return _MonsterCore.Contract.PROMOCREATIONLIMIT(&_MonsterCore.CallOpts)
}

// AutoBirthFee is a free data retrieval call binding the contract method 0xb0c35c05.
//
// Solidity: function autoBirthFee() constant returns(uint256)
func (_MonsterCore *MonsterCoreCaller) AutoBirthFee(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "autoBirthFee")
	return *ret0, err
}

// AutoBirthFee is a free data retrieval call binding the contract method 0xb0c35c05.
//
// Solidity: function autoBirthFee() constant returns(uint256)
func (_MonsterCore *MonsterCoreSession) AutoBirthFee() (*big.Int, error) {
	return _MonsterCore.Contract.AutoBirthFee(&_MonsterCore.CallOpts)
}

// AutoBirthFee is a free data retrieval call binding the contract method 0xb0c35c05.
//
// Solidity: function autoBirthFee() constant returns(uint256)
func (_MonsterCore *MonsterCoreCallerSession) AutoBirthFee() (*big.Int, error) {
	return _MonsterCore.Contract.AutoBirthFee(&_MonsterCore.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(count uint256)
func (_MonsterCore *MonsterCoreCaller) BalanceOf(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "balanceOf", _owner)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(count uint256)
func (_MonsterCore *MonsterCoreSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _MonsterCore.Contract.BalanceOf(&_MonsterCore.CallOpts, _owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(count uint256)
func (_MonsterCore *MonsterCoreCallerSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _MonsterCore.Contract.BalanceOf(&_MonsterCore.CallOpts, _owner)
}

// CanBreedWith is a free data retrieval call binding the contract method 0x46d22c70.
//
// Solidity: function canBreedWith(_matronId uint256, _sireId uint256) constant returns(bool)
func (_MonsterCore *MonsterCoreCaller) CanBreedWith(opts *bind.CallOpts, _matronId *big.Int, _sireId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "canBreedWith", _matronId, _sireId)
	return *ret0, err
}

// CanBreedWith is a free data retrieval call binding the contract method 0x46d22c70.
//
// Solidity: function canBreedWith(_matronId uint256, _sireId uint256) constant returns(bool)
func (_MonsterCore *MonsterCoreSession) CanBreedWith(_matronId *big.Int, _sireId *big.Int) (bool, error) {
	return _MonsterCore.Contract.CanBreedWith(&_MonsterCore.CallOpts, _matronId, _sireId)
}

// CanBreedWith is a free data retrieval call binding the contract method 0x46d22c70.
//
// Solidity: function canBreedWith(_matronId uint256, _sireId uint256) constant returns(bool)
func (_MonsterCore *MonsterCoreCallerSession) CanBreedWith(_matronId *big.Int, _sireId *big.Int) (bool, error) {
	return _MonsterCore.Contract.CanBreedWith(&_MonsterCore.CallOpts, _matronId, _sireId)
}

// CeoAddress is a free data retrieval call binding the contract method 0x0a0f8168.
//
// Solidity: function ceoAddress() constant returns(address)
func (_MonsterCore *MonsterCoreCaller) CeoAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "ceoAddress")
	return *ret0, err
}

// CeoAddress is a free data retrieval call binding the contract method 0x0a0f8168.
//
// Solidity: function ceoAddress() constant returns(address)
func (_MonsterCore *MonsterCoreSession) CeoAddress() (common.Address, error) {
	return _MonsterCore.Contract.CeoAddress(&_MonsterCore.CallOpts)
}

// CeoAddress is a free data retrieval call binding the contract method 0x0a0f8168.
//
// Solidity: function ceoAddress() constant returns(address)
func (_MonsterCore *MonsterCoreCallerSession) CeoAddress() (common.Address, error) {
	return _MonsterCore.Contract.CeoAddress(&_MonsterCore.CallOpts)
}

// CfoAddress is a free data retrieval call binding the contract method 0x0519ce79.
//
// Solidity: function cfoAddress() constant returns(address)
func (_MonsterCore *MonsterCoreCaller) CfoAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "cfoAddress")
	return *ret0, err
}

// CfoAddress is a free data retrieval call binding the contract method 0x0519ce79.
//
// Solidity: function cfoAddress() constant returns(address)
func (_MonsterCore *MonsterCoreSession) CfoAddress() (common.Address, error) {
	return _MonsterCore.Contract.CfoAddress(&_MonsterCore.CallOpts)
}

// CfoAddress is a free data retrieval call binding the contract method 0x0519ce79.
//
// Solidity: function cfoAddress() constant returns(address)
func (_MonsterCore *MonsterCoreCallerSession) CfoAddress() (common.Address, error) {
	return _MonsterCore.Contract.CfoAddress(&_MonsterCore.CallOpts)
}

// CooAddress is a free data retrieval call binding the contract method 0xb047fb50.
//
// Solidity: function cooAddress() constant returns(address)
func (_MonsterCore *MonsterCoreCaller) CooAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "cooAddress")
	return *ret0, err
}

// CooAddress is a free data retrieval call binding the contract method 0xb047fb50.
//
// Solidity: function cooAddress() constant returns(address)
func (_MonsterCore *MonsterCoreSession) CooAddress() (common.Address, error) {
	return _MonsterCore.Contract.CooAddress(&_MonsterCore.CallOpts)
}

// CooAddress is a free data retrieval call binding the contract method 0xb047fb50.
//
// Solidity: function cooAddress() constant returns(address)
func (_MonsterCore *MonsterCoreCallerSession) CooAddress() (common.Address, error) {
	return _MonsterCore.Contract.CooAddress(&_MonsterCore.CallOpts)
}

// Cooldowns is a free data retrieval call binding the contract method 0x9d6fac6f.
//
// Solidity: function cooldowns( uint256) constant returns(uint32)
func (_MonsterCore *MonsterCoreCaller) Cooldowns(opts *bind.CallOpts, arg0 *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "cooldowns", arg0)
	return *ret0, err
}

// Cooldowns is a free data retrieval call binding the contract method 0x9d6fac6f.
//
// Solidity: function cooldowns( uint256) constant returns(uint32)
func (_MonsterCore *MonsterCoreSession) Cooldowns(arg0 *big.Int) (uint32, error) {
	return _MonsterCore.Contract.Cooldowns(&_MonsterCore.CallOpts, arg0)
}

// Cooldowns is a free data retrieval call binding the contract method 0x9d6fac6f.
//
// Solidity: function cooldowns( uint256) constant returns(uint32)
func (_MonsterCore *MonsterCoreCallerSession) Cooldowns(arg0 *big.Int) (uint32, error) {
	return _MonsterCore.Contract.Cooldowns(&_MonsterCore.CallOpts, arg0)
}

// Erc721Metadata is a free data retrieval call binding the contract method 0xbc4006f5.
//
// Solidity: function erc721Metadata() constant returns(address)
func (_MonsterCore *MonsterCoreCaller) Erc721Metadata(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "erc721Metadata")
	return *ret0, err
}

// Erc721Metadata is a free data retrieval call binding the contract method 0xbc4006f5.
//
// Solidity: function erc721Metadata() constant returns(address)
func (_MonsterCore *MonsterCoreSession) Erc721Metadata() (common.Address, error) {
	return _MonsterCore.Contract.Erc721Metadata(&_MonsterCore.CallOpts)
}

// Erc721Metadata is a free data retrieval call binding the contract method 0xbc4006f5.
//
// Solidity: function erc721Metadata() constant returns(address)
func (_MonsterCore *MonsterCoreCallerSession) Erc721Metadata() (common.Address, error) {
	return _MonsterCore.Contract.Erc721Metadata(&_MonsterCore.CallOpts)
}

// Gen0CreatedCount is a free data retrieval call binding the contract method 0xf1ca9410.
//
// Solidity: function gen0CreatedCount() constant returns(uint256)
func (_MonsterCore *MonsterCoreCaller) Gen0CreatedCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "gen0CreatedCount")
	return *ret0, err
}

// Gen0CreatedCount is a free data retrieval call binding the contract method 0xf1ca9410.
//
// Solidity: function gen0CreatedCount() constant returns(uint256)
func (_MonsterCore *MonsterCoreSession) Gen0CreatedCount() (*big.Int, error) {
	return _MonsterCore.Contract.Gen0CreatedCount(&_MonsterCore.CallOpts)
}

// Gen0CreatedCount is a free data retrieval call binding the contract method 0xf1ca9410.
//
// Solidity: function gen0CreatedCount() constant returns(uint256)
func (_MonsterCore *MonsterCoreCallerSession) Gen0CreatedCount() (*big.Int, error) {
	return _MonsterCore.Contract.Gen0CreatedCount(&_MonsterCore.CallOpts)
}

// GeneScience is a free data retrieval call binding the contract method 0xf2b47d52.
//
// Solidity: function geneScience() constant returns(address)
func (_MonsterCore *MonsterCoreCaller) GeneScience(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "geneScience")
	return *ret0, err
}

// GeneScience is a free data retrieval call binding the contract method 0xf2b47d52.
//
// Solidity: function geneScience() constant returns(address)
func (_MonsterCore *MonsterCoreSession) GeneScience() (common.Address, error) {
	return _MonsterCore.Contract.GeneScience(&_MonsterCore.CallOpts)
}

// GeneScience is a free data retrieval call binding the contract method 0xf2b47d52.
//
// Solidity: function geneScience() constant returns(address)
func (_MonsterCore *MonsterCoreCallerSession) GeneScience() (common.Address, error) {
	return _MonsterCore.Contract.GeneScience(&_MonsterCore.CallOpts)
}

// GetMonster is a free data retrieval call binding the contract method 0x62fb6fe1.
//
// Solidity: function getMonster(_id uint256) constant returns(isGestating bool, isReady bool, cooldownIndex uint256, nextActionAt uint256, siringWithId uint256, birthTime uint256, matronId uint256, sireId uint256, generation uint256, genes uint256)
func (_MonsterCore *MonsterCoreCaller) GetMonster(opts *bind.CallOpts, _id *big.Int) (struct {
	IsGestating   bool
	IsReady       bool
	CooldownIndex *big.Int
	NextActionAt  *big.Int
	SiringWithId  *big.Int
	BirthTime     *big.Int
	MatronId      *big.Int
	SireId        *big.Int
	Generation    *big.Int
	Genes         *big.Int
}, error) {
	ret := new(struct {
		IsGestating   bool
		IsReady       bool
		CooldownIndex *big.Int
		NextActionAt  *big.Int
		SiringWithId  *big.Int
		BirthTime     *big.Int
		MatronId      *big.Int
		SireId        *big.Int
		Generation    *big.Int
		Genes         *big.Int
	})
	out := ret
	err := _MonsterCore.contract.Call(opts, out, "getMonster", _id)
	return *ret, err
}

// GetMonster is a free data retrieval call binding the contract method 0x62fb6fe1.
//
// Solidity: function getMonster(_id uint256) constant returns(isGestating bool, isReady bool, cooldownIndex uint256, nextActionAt uint256, siringWithId uint256, birthTime uint256, matronId uint256, sireId uint256, generation uint256, genes uint256)
func (_MonsterCore *MonsterCoreSession) GetMonster(_id *big.Int) (struct {
	IsGestating   bool
	IsReady       bool
	CooldownIndex *big.Int
	NextActionAt  *big.Int
	SiringWithId  *big.Int
	BirthTime     *big.Int
	MatronId      *big.Int
	SireId        *big.Int
	Generation    *big.Int
	Genes         *big.Int
}, error) {
	return _MonsterCore.Contract.GetMonster(&_MonsterCore.CallOpts, _id)
}

// GetMonster is a free data retrieval call binding the contract method 0x62fb6fe1.
//
// Solidity: function getMonster(_id uint256) constant returns(isGestating bool, isReady bool, cooldownIndex uint256, nextActionAt uint256, siringWithId uint256, birthTime uint256, matronId uint256, sireId uint256, generation uint256, genes uint256)
func (_MonsterCore *MonsterCoreCallerSession) GetMonster(_id *big.Int) (struct {
	IsGestating   bool
	IsReady       bool
	CooldownIndex *big.Int
	NextActionAt  *big.Int
	SiringWithId  *big.Int
	BirthTime     *big.Int
	MatronId      *big.Int
	SireId        *big.Int
	Generation    *big.Int
	Genes         *big.Int
}, error) {
	return _MonsterCore.Contract.GetMonster(&_MonsterCore.CallOpts, _id)
}

// IsPregnant is a free data retrieval call binding the contract method 0x1940a936.
//
// Solidity: function isPregnant(_monsterId uint256) constant returns(bool)
func (_MonsterCore *MonsterCoreCaller) IsPregnant(opts *bind.CallOpts, _monsterId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "isPregnant", _monsterId)
	return *ret0, err
}

// IsPregnant is a free data retrieval call binding the contract method 0x1940a936.
//
// Solidity: function isPregnant(_monsterId uint256) constant returns(bool)
func (_MonsterCore *MonsterCoreSession) IsPregnant(_monsterId *big.Int) (bool, error) {
	return _MonsterCore.Contract.IsPregnant(&_MonsterCore.CallOpts, _monsterId)
}

// IsPregnant is a free data retrieval call binding the contract method 0x1940a936.
//
// Solidity: function isPregnant(_monsterId uint256) constant returns(bool)
func (_MonsterCore *MonsterCoreCallerSession) IsPregnant(_monsterId *big.Int) (bool, error) {
	return _MonsterCore.Contract.IsPregnant(&_MonsterCore.CallOpts, _monsterId)
}

// IsReadyToBreed is a free data retrieval call binding the contract method 0xd3e6f49f.
//
// Solidity: function isReadyToBreed(_monsterId uint256) constant returns(bool)
func (_MonsterCore *MonsterCoreCaller) IsReadyToBreed(opts *bind.CallOpts, _monsterId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "isReadyToBreed", _monsterId)
	return *ret0, err
}

// IsReadyToBreed is a free data retrieval call binding the contract method 0xd3e6f49f.
//
// Solidity: function isReadyToBreed(_monsterId uint256) constant returns(bool)
func (_MonsterCore *MonsterCoreSession) IsReadyToBreed(_monsterId *big.Int) (bool, error) {
	return _MonsterCore.Contract.IsReadyToBreed(&_MonsterCore.CallOpts, _monsterId)
}

// IsReadyToBreed is a free data retrieval call binding the contract method 0xd3e6f49f.
//
// Solidity: function isReadyToBreed(_monsterId uint256) constant returns(bool)
func (_MonsterCore *MonsterCoreCallerSession) IsReadyToBreed(_monsterId *big.Int) (bool, error) {
	return _MonsterCore.Contract.IsReadyToBreed(&_MonsterCore.CallOpts, _monsterId)
}

// MonsterIndexToApproved is a free data retrieval call binding the contract method 0x7d55aeea.
//
// Solidity: function monsterIndexToApproved( uint256) constant returns(address)
func (_MonsterCore *MonsterCoreCaller) MonsterIndexToApproved(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "monsterIndexToApproved", arg0)
	return *ret0, err
}

// MonsterIndexToApproved is a free data retrieval call binding the contract method 0x7d55aeea.
//
// Solidity: function monsterIndexToApproved( uint256) constant returns(address)
func (_MonsterCore *MonsterCoreSession) MonsterIndexToApproved(arg0 *big.Int) (common.Address, error) {
	return _MonsterCore.Contract.MonsterIndexToApproved(&_MonsterCore.CallOpts, arg0)
}

// MonsterIndexToApproved is a free data retrieval call binding the contract method 0x7d55aeea.
//
// Solidity: function monsterIndexToApproved( uint256) constant returns(address)
func (_MonsterCore *MonsterCoreCallerSession) MonsterIndexToApproved(arg0 *big.Int) (common.Address, error) {
	return _MonsterCore.Contract.MonsterIndexToApproved(&_MonsterCore.CallOpts, arg0)
}

// MonsterIndexToOwner is a free data retrieval call binding the contract method 0xad4b558c.
//
// Solidity: function monsterIndexToOwner( uint256) constant returns(address)
func (_MonsterCore *MonsterCoreCaller) MonsterIndexToOwner(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "monsterIndexToOwner", arg0)
	return *ret0, err
}

// MonsterIndexToOwner is a free data retrieval call binding the contract method 0xad4b558c.
//
// Solidity: function monsterIndexToOwner( uint256) constant returns(address)
func (_MonsterCore *MonsterCoreSession) MonsterIndexToOwner(arg0 *big.Int) (common.Address, error) {
	return _MonsterCore.Contract.MonsterIndexToOwner(&_MonsterCore.CallOpts, arg0)
}

// MonsterIndexToOwner is a free data retrieval call binding the contract method 0xad4b558c.
//
// Solidity: function monsterIndexToOwner( uint256) constant returns(address)
func (_MonsterCore *MonsterCoreCallerSession) MonsterIndexToOwner(arg0 *big.Int) (common.Address, error) {
	return _MonsterCore.Contract.MonsterIndexToOwner(&_MonsterCore.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_MonsterCore *MonsterCoreCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_MonsterCore *MonsterCoreSession) Name() (string, error) {
	return _MonsterCore.Contract.Name(&_MonsterCore.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_MonsterCore *MonsterCoreCallerSession) Name() (string, error) {
	return _MonsterCore.Contract.Name(&_MonsterCore.CallOpts)
}

// NewContractAddress is a free data retrieval call binding the contract method 0x6af04a57.
//
// Solidity: function newContractAddress() constant returns(address)
func (_MonsterCore *MonsterCoreCaller) NewContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "newContractAddress")
	return *ret0, err
}

// NewContractAddress is a free data retrieval call binding the contract method 0x6af04a57.
//
// Solidity: function newContractAddress() constant returns(address)
func (_MonsterCore *MonsterCoreSession) NewContractAddress() (common.Address, error) {
	return _MonsterCore.Contract.NewContractAddress(&_MonsterCore.CallOpts)
}

// NewContractAddress is a free data retrieval call binding the contract method 0x6af04a57.
//
// Solidity: function newContractAddress() constant returns(address)
func (_MonsterCore *MonsterCoreCallerSession) NewContractAddress() (common.Address, error) {
	return _MonsterCore.Contract.NewContractAddress(&_MonsterCore.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(owner address)
func (_MonsterCore *MonsterCoreCaller) OwnerOf(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "ownerOf", _tokenId)
	return *ret0, err
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(owner address)
func (_MonsterCore *MonsterCoreSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _MonsterCore.Contract.OwnerOf(&_MonsterCore.CallOpts, _tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(owner address)
func (_MonsterCore *MonsterCoreCallerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _MonsterCore.Contract.OwnerOf(&_MonsterCore.CallOpts, _tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_MonsterCore *MonsterCoreCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_MonsterCore *MonsterCoreSession) Paused() (bool, error) {
	return _MonsterCore.Contract.Paused(&_MonsterCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_MonsterCore *MonsterCoreCallerSession) Paused() (bool, error) {
	return _MonsterCore.Contract.Paused(&_MonsterCore.CallOpts)
}

// PregnantMonsters is a free data retrieval call binding the contract method 0xc7e3ff4b.
//
// Solidity: function pregnantMonsters() constant returns(uint256)
func (_MonsterCore *MonsterCoreCaller) PregnantMonsters(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "pregnantMonsters")
	return *ret0, err
}

// PregnantMonsters is a free data retrieval call binding the contract method 0xc7e3ff4b.
//
// Solidity: function pregnantMonsters() constant returns(uint256)
func (_MonsterCore *MonsterCoreSession) PregnantMonsters() (*big.Int, error) {
	return _MonsterCore.Contract.PregnantMonsters(&_MonsterCore.CallOpts)
}

// PregnantMonsters is a free data retrieval call binding the contract method 0xc7e3ff4b.
//
// Solidity: function pregnantMonsters() constant returns(uint256)
func (_MonsterCore *MonsterCoreCallerSession) PregnantMonsters() (*big.Int, error) {
	return _MonsterCore.Contract.PregnantMonsters(&_MonsterCore.CallOpts)
}

// PromoCreatedCount is a free data retrieval call binding the contract method 0x05e45546.
//
// Solidity: function promoCreatedCount() constant returns(uint256)
func (_MonsterCore *MonsterCoreCaller) PromoCreatedCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "promoCreatedCount")
	return *ret0, err
}

// PromoCreatedCount is a free data retrieval call binding the contract method 0x05e45546.
//
// Solidity: function promoCreatedCount() constant returns(uint256)
func (_MonsterCore *MonsterCoreSession) PromoCreatedCount() (*big.Int, error) {
	return _MonsterCore.Contract.PromoCreatedCount(&_MonsterCore.CallOpts)
}

// PromoCreatedCount is a free data retrieval call binding the contract method 0x05e45546.
//
// Solidity: function promoCreatedCount() constant returns(uint256)
func (_MonsterCore *MonsterCoreCallerSession) PromoCreatedCount() (*big.Int, error) {
	return _MonsterCore.Contract.PromoCreatedCount(&_MonsterCore.CallOpts)
}

// SaleAuction is a free data retrieval call binding the contract method 0xe6cbe351.
//
// Solidity: function saleAuction() constant returns(address)
func (_MonsterCore *MonsterCoreCaller) SaleAuction(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "saleAuction")
	return *ret0, err
}

// SaleAuction is a free data retrieval call binding the contract method 0xe6cbe351.
//
// Solidity: function saleAuction() constant returns(address)
func (_MonsterCore *MonsterCoreSession) SaleAuction() (common.Address, error) {
	return _MonsterCore.Contract.SaleAuction(&_MonsterCore.CallOpts)
}

// SaleAuction is a free data retrieval call binding the contract method 0xe6cbe351.
//
// Solidity: function saleAuction() constant returns(address)
func (_MonsterCore *MonsterCoreCallerSession) SaleAuction() (common.Address, error) {
	return _MonsterCore.Contract.SaleAuction(&_MonsterCore.CallOpts)
}

// SecondsPerBlock is a free data retrieval call binding the contract method 0x7a7d4937.
//
// Solidity: function secondsPerBlock() constant returns(uint256)
func (_MonsterCore *MonsterCoreCaller) SecondsPerBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "secondsPerBlock")
	return *ret0, err
}

// SecondsPerBlock is a free data retrieval call binding the contract method 0x7a7d4937.
//
// Solidity: function secondsPerBlock() constant returns(uint256)
func (_MonsterCore *MonsterCoreSession) SecondsPerBlock() (*big.Int, error) {
	return _MonsterCore.Contract.SecondsPerBlock(&_MonsterCore.CallOpts)
}

// SecondsPerBlock is a free data retrieval call binding the contract method 0x7a7d4937.
//
// Solidity: function secondsPerBlock() constant returns(uint256)
func (_MonsterCore *MonsterCoreCallerSession) SecondsPerBlock() (*big.Int, error) {
	return _MonsterCore.Contract.SecondsPerBlock(&_MonsterCore.CallOpts)
}

// SireAllowedToAddress is a free data retrieval call binding the contract method 0x46116e6f.
//
// Solidity: function sireAllowedToAddress( uint256) constant returns(address)
func (_MonsterCore *MonsterCoreCaller) SireAllowedToAddress(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "sireAllowedToAddress", arg0)
	return *ret0, err
}

// SireAllowedToAddress is a free data retrieval call binding the contract method 0x46116e6f.
//
// Solidity: function sireAllowedToAddress( uint256) constant returns(address)
func (_MonsterCore *MonsterCoreSession) SireAllowedToAddress(arg0 *big.Int) (common.Address, error) {
	return _MonsterCore.Contract.SireAllowedToAddress(&_MonsterCore.CallOpts, arg0)
}

// SireAllowedToAddress is a free data retrieval call binding the contract method 0x46116e6f.
//
// Solidity: function sireAllowedToAddress( uint256) constant returns(address)
func (_MonsterCore *MonsterCoreCallerSession) SireAllowedToAddress(arg0 *big.Int) (common.Address, error) {
	return _MonsterCore.Contract.SireAllowedToAddress(&_MonsterCore.CallOpts, arg0)
}

// SiringAuction is a free data retrieval call binding the contract method 0x21717ebf.
//
// Solidity: function siringAuction() constant returns(address)
func (_MonsterCore *MonsterCoreCaller) SiringAuction(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "siringAuction")
	return *ret0, err
}

// SiringAuction is a free data retrieval call binding the contract method 0x21717ebf.
//
// Solidity: function siringAuction() constant returns(address)
func (_MonsterCore *MonsterCoreSession) SiringAuction() (common.Address, error) {
	return _MonsterCore.Contract.SiringAuction(&_MonsterCore.CallOpts)
}

// SiringAuction is a free data retrieval call binding the contract method 0x21717ebf.
//
// Solidity: function siringAuction() constant returns(address)
func (_MonsterCore *MonsterCoreCallerSession) SiringAuction() (common.Address, error) {
	return _MonsterCore.Contract.SiringAuction(&_MonsterCore.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(_interfaceID bytes4) constant returns(bool)
func (_MonsterCore *MonsterCoreCaller) SupportsInterface(opts *bind.CallOpts, _interfaceID [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "supportsInterface", _interfaceID)
	return *ret0, err
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(_interfaceID bytes4) constant returns(bool)
func (_MonsterCore *MonsterCoreSession) SupportsInterface(_interfaceID [4]byte) (bool, error) {
	return _MonsterCore.Contract.SupportsInterface(&_MonsterCore.CallOpts, _interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(_interfaceID bytes4) constant returns(bool)
func (_MonsterCore *MonsterCoreCallerSession) SupportsInterface(_interfaceID [4]byte) (bool, error) {
	return _MonsterCore.Contract.SupportsInterface(&_MonsterCore.CallOpts, _interfaceID)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_MonsterCore *MonsterCoreCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_MonsterCore *MonsterCoreSession) Symbol() (string, error) {
	return _MonsterCore.Contract.Symbol(&_MonsterCore.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_MonsterCore *MonsterCoreCallerSession) Symbol() (string, error) {
	return _MonsterCore.Contract.Symbol(&_MonsterCore.CallOpts)
}

// TokenMetadata is a free data retrieval call binding the contract method 0x0560ff44.
//
// Solidity: function tokenMetadata(_tokenId uint256, _preferredTransport string) constant returns(infoUrl string)
func (_MonsterCore *MonsterCoreCaller) TokenMetadata(opts *bind.CallOpts, _tokenId *big.Int, _preferredTransport string) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "tokenMetadata", _tokenId, _preferredTransport)
	return *ret0, err
}

// TokenMetadata is a free data retrieval call binding the contract method 0x0560ff44.
//
// Solidity: function tokenMetadata(_tokenId uint256, _preferredTransport string) constant returns(infoUrl string)
func (_MonsterCore *MonsterCoreSession) TokenMetadata(_tokenId *big.Int, _preferredTransport string) (string, error) {
	return _MonsterCore.Contract.TokenMetadata(&_MonsterCore.CallOpts, _tokenId, _preferredTransport)
}

// TokenMetadata is a free data retrieval call binding the contract method 0x0560ff44.
//
// Solidity: function tokenMetadata(_tokenId uint256, _preferredTransport string) constant returns(infoUrl string)
func (_MonsterCore *MonsterCoreCallerSession) TokenMetadata(_tokenId *big.Int, _preferredTransport string) (string, error) {
	return _MonsterCore.Contract.TokenMetadata(&_MonsterCore.CallOpts, _tokenId, _preferredTransport)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(_owner address) constant returns(ownerTokens uint256[])
func (_MonsterCore *MonsterCoreCaller) TokensOfOwner(opts *bind.CallOpts, _owner common.Address) ([]*big.Int, error) {
	var (
		ret0 = new([]*big.Int)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "tokensOfOwner", _owner)
	return *ret0, err
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(_owner address) constant returns(ownerTokens uint256[])
func (_MonsterCore *MonsterCoreSession) TokensOfOwner(_owner common.Address) ([]*big.Int, error) {
	return _MonsterCore.Contract.TokensOfOwner(&_MonsterCore.CallOpts, _owner)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(_owner address) constant returns(ownerTokens uint256[])
func (_MonsterCore *MonsterCoreCallerSession) TokensOfOwner(_owner common.Address) ([]*big.Int, error) {
	return _MonsterCore.Contract.TokensOfOwner(&_MonsterCore.CallOpts, _owner)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_MonsterCore *MonsterCoreCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MonsterCore.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_MonsterCore *MonsterCoreSession) TotalSupply() (*big.Int, error) {
	return _MonsterCore.Contract.TotalSupply(&_MonsterCore.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_MonsterCore *MonsterCoreCallerSession) TotalSupply() (*big.Int, error) {
	return _MonsterCore.Contract.TotalSupply(&_MonsterCore.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_to address, _tokenId uint256) returns()
func (_MonsterCore *MonsterCoreTransactor) Approve(opts *bind.TransactOpts, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "approve", _to, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_to address, _tokenId uint256) returns()
func (_MonsterCore *MonsterCoreSession) Approve(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.Approve(&_MonsterCore.TransactOpts, _to, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_to address, _tokenId uint256) returns()
func (_MonsterCore *MonsterCoreTransactorSession) Approve(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.Approve(&_MonsterCore.TransactOpts, _to, _tokenId)
}

// ApproveSiring is a paid mutator transaction binding the contract method 0x4dfff04f.
//
// Solidity: function approveSiring(_addr address, _sireId uint256) returns()
func (_MonsterCore *MonsterCoreTransactor) ApproveSiring(opts *bind.TransactOpts, _addr common.Address, _sireId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "approveSiring", _addr, _sireId)
}

// ApproveSiring is a paid mutator transaction binding the contract method 0x4dfff04f.
//
// Solidity: function approveSiring(_addr address, _sireId uint256) returns()
func (_MonsterCore *MonsterCoreSession) ApproveSiring(_addr common.Address, _sireId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.ApproveSiring(&_MonsterCore.TransactOpts, _addr, _sireId)
}

// ApproveSiring is a paid mutator transaction binding the contract method 0x4dfff04f.
//
// Solidity: function approveSiring(_addr address, _sireId uint256) returns()
func (_MonsterCore *MonsterCoreTransactorSession) ApproveSiring(_addr common.Address, _sireId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.ApproveSiring(&_MonsterCore.TransactOpts, _addr, _sireId)
}

// BidOnSiringAuction is a paid mutator transaction binding the contract method 0xed60ade6.
//
// Solidity: function bidOnSiringAuction(_sireId uint256, _matronId uint256) returns()
func (_MonsterCore *MonsterCoreTransactor) BidOnSiringAuction(opts *bind.TransactOpts, _sireId *big.Int, _matronId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "bidOnSiringAuction", _sireId, _matronId)
}

// BidOnSiringAuction is a paid mutator transaction binding the contract method 0xed60ade6.
//
// Solidity: function bidOnSiringAuction(_sireId uint256, _matronId uint256) returns()
func (_MonsterCore *MonsterCoreSession) BidOnSiringAuction(_sireId *big.Int, _matronId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.BidOnSiringAuction(&_MonsterCore.TransactOpts, _sireId, _matronId)
}

// BidOnSiringAuction is a paid mutator transaction binding the contract method 0xed60ade6.
//
// Solidity: function bidOnSiringAuction(_sireId uint256, _matronId uint256) returns()
func (_MonsterCore *MonsterCoreTransactorSession) BidOnSiringAuction(_sireId *big.Int, _matronId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.BidOnSiringAuction(&_MonsterCore.TransactOpts, _sireId, _matronId)
}

// BreedWithAuto is a paid mutator transaction binding the contract method 0xf7d8c883.
//
// Solidity: function breedWithAuto(_matronId uint256, _sireId uint256) returns()
func (_MonsterCore *MonsterCoreTransactor) BreedWithAuto(opts *bind.TransactOpts, _matronId *big.Int, _sireId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "breedWithAuto", _matronId, _sireId)
}

// BreedWithAuto is a paid mutator transaction binding the contract method 0xf7d8c883.
//
// Solidity: function breedWithAuto(_matronId uint256, _sireId uint256) returns()
func (_MonsterCore *MonsterCoreSession) BreedWithAuto(_matronId *big.Int, _sireId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.BreedWithAuto(&_MonsterCore.TransactOpts, _matronId, _sireId)
}

// BreedWithAuto is a paid mutator transaction binding the contract method 0xf7d8c883.
//
// Solidity: function breedWithAuto(_matronId uint256, _sireId uint256) returns()
func (_MonsterCore *MonsterCoreTransactorSession) BreedWithAuto(_matronId *big.Int, _sireId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.BreedWithAuto(&_MonsterCore.TransactOpts, _matronId, _sireId)
}

// CreateGen0Auction is a paid mutator transaction binding the contract method 0xc3bea9af.
//
// Solidity: function createGen0Auction(_genes uint256) returns()
func (_MonsterCore *MonsterCoreTransactor) CreateGen0Auction(opts *bind.TransactOpts, _genes *big.Int) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "createGen0Auction", _genes)
}

// CreateGen0Auction is a paid mutator transaction binding the contract method 0xc3bea9af.
//
// Solidity: function createGen0Auction(_genes uint256) returns()
func (_MonsterCore *MonsterCoreSession) CreateGen0Auction(_genes *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.CreateGen0Auction(&_MonsterCore.TransactOpts, _genes)
}

// CreateGen0Auction is a paid mutator transaction binding the contract method 0xc3bea9af.
//
// Solidity: function createGen0Auction(_genes uint256) returns()
func (_MonsterCore *MonsterCoreTransactorSession) CreateGen0Auction(_genes *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.CreateGen0Auction(&_MonsterCore.TransactOpts, _genes)
}

// CreatePromoMonster is a paid mutator transaction binding the contract method 0x8b56aff8.
//
// Solidity: function createPromoMonster(_genes uint256, _owner address) returns()
func (_MonsterCore *MonsterCoreTransactor) CreatePromoMonster(opts *bind.TransactOpts, _genes *big.Int, _owner common.Address) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "createPromoMonster", _genes, _owner)
}

// CreatePromoMonster is a paid mutator transaction binding the contract method 0x8b56aff8.
//
// Solidity: function createPromoMonster(_genes uint256, _owner address) returns()
func (_MonsterCore *MonsterCoreSession) CreatePromoMonster(_genes *big.Int, _owner common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.CreatePromoMonster(&_MonsterCore.TransactOpts, _genes, _owner)
}

// CreatePromoMonster is a paid mutator transaction binding the contract method 0x8b56aff8.
//
// Solidity: function createPromoMonster(_genes uint256, _owner address) returns()
func (_MonsterCore *MonsterCoreTransactorSession) CreatePromoMonster(_genes *big.Int, _owner common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.CreatePromoMonster(&_MonsterCore.TransactOpts, _genes, _owner)
}

// CreateSaleAuction is a paid mutator transaction binding the contract method 0x3d7d3f5a.
//
// Solidity: function createSaleAuction(_monsterId uint256, _startingPrice uint256, _endingPrice uint256, _duration uint256) returns()
func (_MonsterCore *MonsterCoreTransactor) CreateSaleAuction(opts *bind.TransactOpts, _monsterId *big.Int, _startingPrice *big.Int, _endingPrice *big.Int, _duration *big.Int) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "createSaleAuction", _monsterId, _startingPrice, _endingPrice, _duration)
}

// CreateSaleAuction is a paid mutator transaction binding the contract method 0x3d7d3f5a.
//
// Solidity: function createSaleAuction(_monsterId uint256, _startingPrice uint256, _endingPrice uint256, _duration uint256) returns()
func (_MonsterCore *MonsterCoreSession) CreateSaleAuction(_monsterId *big.Int, _startingPrice *big.Int, _endingPrice *big.Int, _duration *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.CreateSaleAuction(&_MonsterCore.TransactOpts, _monsterId, _startingPrice, _endingPrice, _duration)
}

// CreateSaleAuction is a paid mutator transaction binding the contract method 0x3d7d3f5a.
//
// Solidity: function createSaleAuction(_monsterId uint256, _startingPrice uint256, _endingPrice uint256, _duration uint256) returns()
func (_MonsterCore *MonsterCoreTransactorSession) CreateSaleAuction(_monsterId *big.Int, _startingPrice *big.Int, _endingPrice *big.Int, _duration *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.CreateSaleAuction(&_MonsterCore.TransactOpts, _monsterId, _startingPrice, _endingPrice, _duration)
}

// CreateSiringAuction is a paid mutator transaction binding the contract method 0x4ad8c938.
//
// Solidity: function createSiringAuction(_monsterId uint256, _startingPrice uint256, _endingPrice uint256, _duration uint256) returns()
func (_MonsterCore *MonsterCoreTransactor) CreateSiringAuction(opts *bind.TransactOpts, _monsterId *big.Int, _startingPrice *big.Int, _endingPrice *big.Int, _duration *big.Int) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "createSiringAuction", _monsterId, _startingPrice, _endingPrice, _duration)
}

// CreateSiringAuction is a paid mutator transaction binding the contract method 0x4ad8c938.
//
// Solidity: function createSiringAuction(_monsterId uint256, _startingPrice uint256, _endingPrice uint256, _duration uint256) returns()
func (_MonsterCore *MonsterCoreSession) CreateSiringAuction(_monsterId *big.Int, _startingPrice *big.Int, _endingPrice *big.Int, _duration *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.CreateSiringAuction(&_MonsterCore.TransactOpts, _monsterId, _startingPrice, _endingPrice, _duration)
}

// CreateSiringAuction is a paid mutator transaction binding the contract method 0x4ad8c938.
//
// Solidity: function createSiringAuction(_monsterId uint256, _startingPrice uint256, _endingPrice uint256, _duration uint256) returns()
func (_MonsterCore *MonsterCoreTransactorSession) CreateSiringAuction(_monsterId *big.Int, _startingPrice *big.Int, _endingPrice *big.Int, _duration *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.CreateSiringAuction(&_MonsterCore.TransactOpts, _monsterId, _startingPrice, _endingPrice, _duration)
}

// GiveBirth is a paid mutator transaction binding the contract method 0x88c2a0bf.
//
// Solidity: function giveBirth(_matronId uint256) returns(uint256)
func (_MonsterCore *MonsterCoreTransactor) GiveBirth(opts *bind.TransactOpts, _matronId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "giveBirth", _matronId)
}

// GiveBirth is a paid mutator transaction binding the contract method 0x88c2a0bf.
//
// Solidity: function giveBirth(_matronId uint256) returns(uint256)
func (_MonsterCore *MonsterCoreSession) GiveBirth(_matronId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.GiveBirth(&_MonsterCore.TransactOpts, _matronId)
}

// GiveBirth is a paid mutator transaction binding the contract method 0x88c2a0bf.
//
// Solidity: function giveBirth(_matronId uint256) returns(uint256)
func (_MonsterCore *MonsterCoreTransactorSession) GiveBirth(_matronId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.GiveBirth(&_MonsterCore.TransactOpts, _matronId)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MonsterCore *MonsterCoreTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MonsterCore *MonsterCoreSession) Pause() (*types.Transaction, error) {
	return _MonsterCore.Contract.Pause(&_MonsterCore.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MonsterCore *MonsterCoreTransactorSession) Pause() (*types.Transaction, error) {
	return _MonsterCore.Contract.Pause(&_MonsterCore.TransactOpts)
}

// SetAutoBirthFee is a paid mutator transaction binding the contract method 0x4b85fd55.
//
// Solidity: function setAutoBirthFee(val uint256) returns()
func (_MonsterCore *MonsterCoreTransactor) SetAutoBirthFee(opts *bind.TransactOpts, val *big.Int) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "setAutoBirthFee", val)
}

// SetAutoBirthFee is a paid mutator transaction binding the contract method 0x4b85fd55.
//
// Solidity: function setAutoBirthFee(val uint256) returns()
func (_MonsterCore *MonsterCoreSession) SetAutoBirthFee(val *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetAutoBirthFee(&_MonsterCore.TransactOpts, val)
}

// SetAutoBirthFee is a paid mutator transaction binding the contract method 0x4b85fd55.
//
// Solidity: function setAutoBirthFee(val uint256) returns()
func (_MonsterCore *MonsterCoreTransactorSession) SetAutoBirthFee(val *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetAutoBirthFee(&_MonsterCore.TransactOpts, val)
}

// SetCEO is a paid mutator transaction binding the contract method 0x27d7874c.
//
// Solidity: function setCEO(_newCEO address) returns()
func (_MonsterCore *MonsterCoreTransactor) SetCEO(opts *bind.TransactOpts, _newCEO common.Address) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "setCEO", _newCEO)
}

// SetCEO is a paid mutator transaction binding the contract method 0x27d7874c.
//
// Solidity: function setCEO(_newCEO address) returns()
func (_MonsterCore *MonsterCoreSession) SetCEO(_newCEO common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetCEO(&_MonsterCore.TransactOpts, _newCEO)
}

// SetCEO is a paid mutator transaction binding the contract method 0x27d7874c.
//
// Solidity: function setCEO(_newCEO address) returns()
func (_MonsterCore *MonsterCoreTransactorSession) SetCEO(_newCEO common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetCEO(&_MonsterCore.TransactOpts, _newCEO)
}

// SetCFO is a paid mutator transaction binding the contract method 0x4e0a3379.
//
// Solidity: function setCFO(_newCFO address) returns()
func (_MonsterCore *MonsterCoreTransactor) SetCFO(opts *bind.TransactOpts, _newCFO common.Address) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "setCFO", _newCFO)
}

// SetCFO is a paid mutator transaction binding the contract method 0x4e0a3379.
//
// Solidity: function setCFO(_newCFO address) returns()
func (_MonsterCore *MonsterCoreSession) SetCFO(_newCFO common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetCFO(&_MonsterCore.TransactOpts, _newCFO)
}

// SetCFO is a paid mutator transaction binding the contract method 0x4e0a3379.
//
// Solidity: function setCFO(_newCFO address) returns()
func (_MonsterCore *MonsterCoreTransactorSession) SetCFO(_newCFO common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetCFO(&_MonsterCore.TransactOpts, _newCFO)
}

// SetCOO is a paid mutator transaction binding the contract method 0x2ba73c15.
//
// Solidity: function setCOO(_newCOO address) returns()
func (_MonsterCore *MonsterCoreTransactor) SetCOO(opts *bind.TransactOpts, _newCOO common.Address) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "setCOO", _newCOO)
}

// SetCOO is a paid mutator transaction binding the contract method 0x2ba73c15.
//
// Solidity: function setCOO(_newCOO address) returns()
func (_MonsterCore *MonsterCoreSession) SetCOO(_newCOO common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetCOO(&_MonsterCore.TransactOpts, _newCOO)
}

// SetCOO is a paid mutator transaction binding the contract method 0x2ba73c15.
//
// Solidity: function setCOO(_newCOO address) returns()
func (_MonsterCore *MonsterCoreTransactorSession) SetCOO(_newCOO common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetCOO(&_MonsterCore.TransactOpts, _newCOO)
}

// SetGeneScienceAddress is a paid mutator transaction binding the contract method 0x24e7a38a.
//
// Solidity: function setGeneScienceAddress(_address address) returns()
func (_MonsterCore *MonsterCoreTransactor) SetGeneScienceAddress(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "setGeneScienceAddress", _address)
}

// SetGeneScienceAddress is a paid mutator transaction binding the contract method 0x24e7a38a.
//
// Solidity: function setGeneScienceAddress(_address address) returns()
func (_MonsterCore *MonsterCoreSession) SetGeneScienceAddress(_address common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetGeneScienceAddress(&_MonsterCore.TransactOpts, _address)
}

// SetGeneScienceAddress is a paid mutator transaction binding the contract method 0x24e7a38a.
//
// Solidity: function setGeneScienceAddress(_address address) returns()
func (_MonsterCore *MonsterCoreTransactorSession) SetGeneScienceAddress(_address common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetGeneScienceAddress(&_MonsterCore.TransactOpts, _address)
}

// SetMetadataAddress is a paid mutator transaction binding the contract method 0xe17b25af.
//
// Solidity: function setMetadataAddress(_contractAddress address) returns()
func (_MonsterCore *MonsterCoreTransactor) SetMetadataAddress(opts *bind.TransactOpts, _contractAddress common.Address) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "setMetadataAddress", _contractAddress)
}

// SetMetadataAddress is a paid mutator transaction binding the contract method 0xe17b25af.
//
// Solidity: function setMetadataAddress(_contractAddress address) returns()
func (_MonsterCore *MonsterCoreSession) SetMetadataAddress(_contractAddress common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetMetadataAddress(&_MonsterCore.TransactOpts, _contractAddress)
}

// SetMetadataAddress is a paid mutator transaction binding the contract method 0xe17b25af.
//
// Solidity: function setMetadataAddress(_contractAddress address) returns()
func (_MonsterCore *MonsterCoreTransactorSession) SetMetadataAddress(_contractAddress common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetMetadataAddress(&_MonsterCore.TransactOpts, _contractAddress)
}

// SetNewAddress is a paid mutator transaction binding the contract method 0x71587988.
//
// Solidity: function setNewAddress(_v2Address address) returns()
func (_MonsterCore *MonsterCoreTransactor) SetNewAddress(opts *bind.TransactOpts, _v2Address common.Address) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "setNewAddress", _v2Address)
}

// SetNewAddress is a paid mutator transaction binding the contract method 0x71587988.
//
// Solidity: function setNewAddress(_v2Address address) returns()
func (_MonsterCore *MonsterCoreSession) SetNewAddress(_v2Address common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetNewAddress(&_MonsterCore.TransactOpts, _v2Address)
}

// SetNewAddress is a paid mutator transaction binding the contract method 0x71587988.
//
// Solidity: function setNewAddress(_v2Address address) returns()
func (_MonsterCore *MonsterCoreTransactorSession) SetNewAddress(_v2Address common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetNewAddress(&_MonsterCore.TransactOpts, _v2Address)
}

// SetSaleAuctionAddress is a paid mutator transaction binding the contract method 0x6fbde40d.
//
// Solidity: function setSaleAuctionAddress(_address address) returns()
func (_MonsterCore *MonsterCoreTransactor) SetSaleAuctionAddress(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "setSaleAuctionAddress", _address)
}

// SetSaleAuctionAddress is a paid mutator transaction binding the contract method 0x6fbde40d.
//
// Solidity: function setSaleAuctionAddress(_address address) returns()
func (_MonsterCore *MonsterCoreSession) SetSaleAuctionAddress(_address common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetSaleAuctionAddress(&_MonsterCore.TransactOpts, _address)
}

// SetSaleAuctionAddress is a paid mutator transaction binding the contract method 0x6fbde40d.
//
// Solidity: function setSaleAuctionAddress(_address address) returns()
func (_MonsterCore *MonsterCoreTransactorSession) SetSaleAuctionAddress(_address common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetSaleAuctionAddress(&_MonsterCore.TransactOpts, _address)
}

// SetSecondsPerBlock is a paid mutator transaction binding the contract method 0x5663896e.
//
// Solidity: function setSecondsPerBlock(secs uint256) returns()
func (_MonsterCore *MonsterCoreTransactor) SetSecondsPerBlock(opts *bind.TransactOpts, secs *big.Int) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "setSecondsPerBlock", secs)
}

// SetSecondsPerBlock is a paid mutator transaction binding the contract method 0x5663896e.
//
// Solidity: function setSecondsPerBlock(secs uint256) returns()
func (_MonsterCore *MonsterCoreSession) SetSecondsPerBlock(secs *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetSecondsPerBlock(&_MonsterCore.TransactOpts, secs)
}

// SetSecondsPerBlock is a paid mutator transaction binding the contract method 0x5663896e.
//
// Solidity: function setSecondsPerBlock(secs uint256) returns()
func (_MonsterCore *MonsterCoreTransactorSession) SetSecondsPerBlock(secs *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetSecondsPerBlock(&_MonsterCore.TransactOpts, secs)
}

// SetSiringAuctionAddress is a paid mutator transaction binding the contract method 0x14001f4c.
//
// Solidity: function setSiringAuctionAddress(_address address) returns()
func (_MonsterCore *MonsterCoreTransactor) SetSiringAuctionAddress(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "setSiringAuctionAddress", _address)
}

// SetSiringAuctionAddress is a paid mutator transaction binding the contract method 0x14001f4c.
//
// Solidity: function setSiringAuctionAddress(_address address) returns()
func (_MonsterCore *MonsterCoreSession) SetSiringAuctionAddress(_address common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetSiringAuctionAddress(&_MonsterCore.TransactOpts, _address)
}

// SetSiringAuctionAddress is a paid mutator transaction binding the contract method 0x14001f4c.
//
// Solidity: function setSiringAuctionAddress(_address address) returns()
func (_MonsterCore *MonsterCoreTransactorSession) SetSiringAuctionAddress(_address common.Address) (*types.Transaction, error) {
	return _MonsterCore.Contract.SetSiringAuctionAddress(&_MonsterCore.TransactOpts, _address)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(_to address, _tokenId uint256) returns()
func (_MonsterCore *MonsterCoreTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "transfer", _to, _tokenId)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(_to address, _tokenId uint256) returns()
func (_MonsterCore *MonsterCoreSession) Transfer(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.Transfer(&_MonsterCore.TransactOpts, _to, _tokenId)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(_to address, _tokenId uint256) returns()
func (_MonsterCore *MonsterCoreTransactorSession) Transfer(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.Transfer(&_MonsterCore.TransactOpts, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256) returns()
func (_MonsterCore *MonsterCoreTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "transferFrom", _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256) returns()
func (_MonsterCore *MonsterCoreSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.TransferFrom(&_MonsterCore.TransactOpts, _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256) returns()
func (_MonsterCore *MonsterCoreTransactorSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MonsterCore.Contract.TransferFrom(&_MonsterCore.TransactOpts, _from, _to, _tokenId)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MonsterCore *MonsterCoreTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MonsterCore *MonsterCoreSession) Unpause() (*types.Transaction, error) {
	return _MonsterCore.Contract.Unpause(&_MonsterCore.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MonsterCore *MonsterCoreTransactorSession) Unpause() (*types.Transaction, error) {
	return _MonsterCore.Contract.Unpause(&_MonsterCore.TransactOpts)
}

// WithdrawAuctionBalances is a paid mutator transaction binding the contract method 0x91876e57.
//
// Solidity: function withdrawAuctionBalances() returns()
func (_MonsterCore *MonsterCoreTransactor) WithdrawAuctionBalances(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "withdrawAuctionBalances")
}

// WithdrawAuctionBalances is a paid mutator transaction binding the contract method 0x91876e57.
//
// Solidity: function withdrawAuctionBalances() returns()
func (_MonsterCore *MonsterCoreSession) WithdrawAuctionBalances() (*types.Transaction, error) {
	return _MonsterCore.Contract.WithdrawAuctionBalances(&_MonsterCore.TransactOpts)
}

// WithdrawAuctionBalances is a paid mutator transaction binding the contract method 0x91876e57.
//
// Solidity: function withdrawAuctionBalances() returns()
func (_MonsterCore *MonsterCoreTransactorSession) WithdrawAuctionBalances() (*types.Transaction, error) {
	return _MonsterCore.Contract.WithdrawAuctionBalances(&_MonsterCore.TransactOpts)
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x5fd8c710.
//
// Solidity: function withdrawBalance() returns()
func (_MonsterCore *MonsterCoreTransactor) WithdrawBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MonsterCore.contract.Transact(opts, "withdrawBalance")
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x5fd8c710.
//
// Solidity: function withdrawBalance() returns()
func (_MonsterCore *MonsterCoreSession) WithdrawBalance() (*types.Transaction, error) {
	return _MonsterCore.Contract.WithdrawBalance(&_MonsterCore.TransactOpts)
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x5fd8c710.
//
// Solidity: function withdrawBalance() returns()
func (_MonsterCore *MonsterCoreTransactorSession) WithdrawBalance() (*types.Transaction, error) {
	return _MonsterCore.Contract.WithdrawBalance(&_MonsterCore.TransactOpts)
}

// MonsterCoreApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MonsterCore contract.
type MonsterCoreApprovalIterator struct {
	Event *MonsterCoreApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MonsterCoreApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MonsterCoreApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MonsterCoreApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MonsterCoreApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MonsterCoreApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MonsterCoreApproval represents a Approval event raised by the MonsterCore contract.
type MonsterCoreApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner address, approved address, tokenId uint256)
func (_MonsterCore *MonsterCoreFilterer) FilterApproval(opts *bind.FilterOpts) (*MonsterCoreApprovalIterator, error) {

	logs, sub, err := _MonsterCore.contract.FilterLogs(opts, "Approval")
	if err != nil {
		return nil, err
	}
	return &MonsterCoreApprovalIterator{contract: _MonsterCore.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner address, approved address, tokenId uint256)
func (_MonsterCore *MonsterCoreFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MonsterCoreApproval) (event.Subscription, error) {

	logs, sub, err := _MonsterCore.contract.WatchLogs(opts, "Approval")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MonsterCoreApproval)
				if err := _MonsterCore.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MonsterCoreBirthIterator is returned from FilterBirth and is used to iterate over the raw logs and unpacked data for Birth events raised by the MonsterCore contract.
type MonsterCoreBirthIterator struct {
	Event *MonsterCoreBirth // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MonsterCoreBirthIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MonsterCoreBirth)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MonsterCoreBirth)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MonsterCoreBirthIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MonsterCoreBirthIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MonsterCoreBirth represents a Birth event raised by the MonsterCore contract.
type MonsterCoreBirth struct {
	Owner     common.Address
	MonsterId *big.Int
	MatronId  *big.Int
	SireId    *big.Int
	Genes     *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterBirth is a free log retrieval operation binding the contract event 0x0a5311bd2a6608f08a180df2ee7c5946819a649b204b554bb8e39825b2c50ad5.
//
// Solidity: e Birth(owner address, MonsterId uint256, matronId uint256, sireId uint256, genes uint256)
func (_MonsterCore *MonsterCoreFilterer) FilterBirth(opts *bind.FilterOpts) (*MonsterCoreBirthIterator, error) {

	logs, sub, err := _MonsterCore.contract.FilterLogs(opts, "Birth")
	if err != nil {
		return nil, err
	}
	return &MonsterCoreBirthIterator{contract: _MonsterCore.contract, event: "Birth", logs: logs, sub: sub}, nil
}

// WatchBirth is a free log subscription operation binding the contract event 0x0a5311bd2a6608f08a180df2ee7c5946819a649b204b554bb8e39825b2c50ad5.
//
// Solidity: e Birth(owner address, MonsterId uint256, matronId uint256, sireId uint256, genes uint256)
func (_MonsterCore *MonsterCoreFilterer) WatchBirth(opts *bind.WatchOpts, sink chan<- *MonsterCoreBirth) (event.Subscription, error) {

	logs, sub, err := _MonsterCore.contract.WatchLogs(opts, "Birth")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MonsterCoreBirth)
				if err := _MonsterCore.contract.UnpackLog(event, "Birth", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MonsterCoreContractUpgradeIterator is returned from FilterContractUpgrade and is used to iterate over the raw logs and unpacked data for ContractUpgrade events raised by the MonsterCore contract.
type MonsterCoreContractUpgradeIterator struct {
	Event *MonsterCoreContractUpgrade // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MonsterCoreContractUpgradeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MonsterCoreContractUpgrade)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MonsterCoreContractUpgrade)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MonsterCoreContractUpgradeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MonsterCoreContractUpgradeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MonsterCoreContractUpgrade represents a ContractUpgrade event raised by the MonsterCore contract.
type MonsterCoreContractUpgrade struct {
	NewContract common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContractUpgrade is a free log retrieval operation binding the contract event 0x450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa446199305.
//
// Solidity: e ContractUpgrade(newContract address)
func (_MonsterCore *MonsterCoreFilterer) FilterContractUpgrade(opts *bind.FilterOpts) (*MonsterCoreContractUpgradeIterator, error) {

	logs, sub, err := _MonsterCore.contract.FilterLogs(opts, "ContractUpgrade")
	if err != nil {
		return nil, err
	}
	return &MonsterCoreContractUpgradeIterator{contract: _MonsterCore.contract, event: "ContractUpgrade", logs: logs, sub: sub}, nil
}

// WatchContractUpgrade is a free log subscription operation binding the contract event 0x450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa446199305.
//
// Solidity: e ContractUpgrade(newContract address)
func (_MonsterCore *MonsterCoreFilterer) WatchContractUpgrade(opts *bind.WatchOpts, sink chan<- *MonsterCoreContractUpgrade) (event.Subscription, error) {

	logs, sub, err := _MonsterCore.contract.WatchLogs(opts, "ContractUpgrade")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MonsterCoreContractUpgrade)
				if err := _MonsterCore.contract.UnpackLog(event, "ContractUpgrade", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MonsterCorePregnantIterator is returned from FilterPregnant and is used to iterate over the raw logs and unpacked data for Pregnant events raised by the MonsterCore contract.
type MonsterCorePregnantIterator struct {
	Event *MonsterCorePregnant // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MonsterCorePregnantIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MonsterCorePregnant)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MonsterCorePregnant)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MonsterCorePregnantIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MonsterCorePregnantIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MonsterCorePregnant represents a Pregnant event raised by the MonsterCore contract.
type MonsterCorePregnant struct {
	Owner            common.Address
	MatronId         *big.Int
	SireId           *big.Int
	CooldownEndBlock *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterPregnant is a free log retrieval operation binding the contract event 0x241ea03ca20251805084d27d4440371c34a0b85ff108f6bb5611248f73818b80.
//
// Solidity: e Pregnant(owner address, matronId uint256, sireId uint256, cooldownEndBlock uint256)
func (_MonsterCore *MonsterCoreFilterer) FilterPregnant(opts *bind.FilterOpts) (*MonsterCorePregnantIterator, error) {

	logs, sub, err := _MonsterCore.contract.FilterLogs(opts, "Pregnant")
	if err != nil {
		return nil, err
	}
	return &MonsterCorePregnantIterator{contract: _MonsterCore.contract, event: "Pregnant", logs: logs, sub: sub}, nil
}

// WatchPregnant is a free log subscription operation binding the contract event 0x241ea03ca20251805084d27d4440371c34a0b85ff108f6bb5611248f73818b80.
//
// Solidity: e Pregnant(owner address, matronId uint256, sireId uint256, cooldownEndBlock uint256)
func (_MonsterCore *MonsterCoreFilterer) WatchPregnant(opts *bind.WatchOpts, sink chan<- *MonsterCorePregnant) (event.Subscription, error) {

	logs, sub, err := _MonsterCore.contract.WatchLogs(opts, "Pregnant")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MonsterCorePregnant)
				if err := _MonsterCore.contract.UnpackLog(event, "Pregnant", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MonsterCoreTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MonsterCore contract.
type MonsterCoreTransferIterator struct {
	Event *MonsterCoreTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MonsterCoreTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MonsterCoreTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MonsterCoreTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MonsterCoreTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MonsterCoreTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MonsterCoreTransfer represents a Transfer event raised by the MonsterCore contract.
type MonsterCoreTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from address, to address, tokenId uint256)
func (_MonsterCore *MonsterCoreFilterer) FilterTransfer(opts *bind.FilterOpts) (*MonsterCoreTransferIterator, error) {

	logs, sub, err := _MonsterCore.contract.FilterLogs(opts, "Transfer")
	if err != nil {
		return nil, err
	}
	return &MonsterCoreTransferIterator{contract: _MonsterCore.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from address, to address, tokenId uint256)
func (_MonsterCore *MonsterCoreFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MonsterCoreTransfer) (event.Subscription, error) {

	logs, sub, err := _MonsterCore.contract.WatchLogs(opts, "Transfer")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MonsterCoreTransfer)
				if err := _MonsterCore.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
